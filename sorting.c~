#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <math.h>
#include <time.h>
#include "strings.h"

long *Load_File(char *Filename, int *Size){
  FILE *inputfile = fopen(Filename, "r");
  fseek(inputfile, 0, SEEK_SET);
  int nelements = 0;

  //if(inputfile == NULL){
  //  return NULL;
  //}

  fscanf(inputfile, "%d", &nelements);
  long *Array = malloc(sizeof(long) * nelements);
  int i = 0;
  //printf("nelements is %d",nelements);
  for(i = 0; i < nelements; i++){
    fscanf(inputfile, "%ld", &(Array[i]));
  }

  *Size = i; 

  fclose(inputfile);
  return Array;
}

int Save_File(char *Filename, long *Array, int Size){
  FILE *outputfile = fopen(Filename, "w");
  fseek(outputfile, 0, SEEK_SET);

  fprintf(outputfile, "%d\n", Size);
  int i = 0;

  for(i = 0; i < Size; i++){
    fprintf(outputfile, "%ld\n", Array[i]);
  }

  fclose(outputfile);
  return 1;
}

void Shell_Insertion_Sort_Seq1(long *Array, int Size, double *N_Comp, double *N_Move){
  int i = 0; 
  int j = 0;
  int k = 0; 
  int temp = 0;
  int num_comp = 0;
  int num_move = 0;
  int nelements = 0;
  int kval = 0;
  while(pow(2, nelements) < Size){
    nelements++;
  }
  int num[nelements - 1];
  int b = 0;
  int c = 0;

  for(i = 1; i < Size; i = i * 2 + 1){
    num[b] = i; 
    b++;
  }
  
  for(k = b - 1; k >= 0; k--){
    kval = num[k];
    printf("%d\n", kval);
    for(j = kval; j < Size; j++){   
      temp = Array[j];
      num_move++;
      c = j; 
      while(c >= kval && (Array[c - kval] > temp)){
	num_comp++;
	Array[c] = Array[c - kval];
	num_move++;
	c = c - kval;
      }
      Array[c] = temp;
      num_move++;
    }
  }   
  *N_Comp = num_comp;
  *N_Move = num_move;
}

  void Shell_Bubble_Sort_Seq1(long *Array, int Size, double *N_Comp, double *N_Move){
  int i = 0; 
  int j = 0;
  int k = 0; 
  int temp = 0;
  int h = 0; 
  int num_comp = 0;
  int num_move = 0;
  int num = 0;
  int temp = 0;
  int num_comp = 0;
  int num_move = 0;
  int nelements = 0;
  int kval = 0;
  while(pow(2, nelements) < Size){
    nelements++;
  }
  int num[nelements - 1];
  int b = 0;
  int c = 0;

  for(i = 1; i < Size; i = i * 2 + 1){
    num[b] = i; 
    b++;
  }
  
  for(k = b - 1; k >= 0; k--){
    kval = num[k];
    printf("%d\n", kval);
    for(j = kval; j < Size; j++){   
      for(h = num; h > j; h = h - i){
	num_comp++;
	if(Array[h] < Array[h - i]){
	  temp = Array[h - i];
	  Array[h - i] = Array[h];
	  Array[h] = temp;
	  num_move++;
	  Array[c] = temp;
	  num_move++;
	}
      }   
    }
    *N_Comp = num_comp;
    *N_Move = num_move;
  }

void Shell_Insertion_Sort_Seq2(long *Array, int Size, double *N_Comp, double *N_Move){
  //int i = 0; 
  int j = 0;
  int kval = 0; 
  int k = 0;
  int temp = 0; 
  int num_comp = 0;
  int num_move = 0;

  int p = 0;
  int q = 0;
  int r = 0;
  int bigval = 0;
  int n = log(Size)/log(3);
  int ktotal = ((n+2)*(n+1))/2;
  int two = 0;
  int three = 0;
  int total = 0;
  int seq[ktotal]; 
  int counter = 0;
  int c = 0;

  while(p < n+1){
    q = 0;
    r = 0;
    while(r <= bigval){
      two = pow(2, p);
      three = pow(3, q);
      total = two * three; 
      seq[counter] = total;
      p--;
      q++;
      r++;
      counter++;
    }
    bigval++;
    p = bigval;
  }

  for(k = counter - 1; k >= 0; k--){
    kval = seq[k];
    printf("%d\n", kval);
    for(j = kval; j < Size; j++){   
      temp = Array[j];
      num_move++;
      c = j; 
      while(c >= kval && (Array[c - kval] > temp)){
	num_comp++;
	Array[c] = Array[c - kval];
	num_move++;
	c = c - kval;
      }
      Array[c] = temp;
      num_move++;
    }
  }   
  *N_Comp = num_comp;
  *N_Move = num_move;
}

void Shell_Bubble_Sort_Seq2(long *Array, int Size, double *N_Comp, double *N_Move){
  int i = 0; 
  int j = 0;
  int k = 0; 
  int temp = 0;
  int h = 0; 
  int num_comp = 0;
  int num_move = 0;
  int num = 0;
  
  int p = 0;
  int q = 0;
  int bigval = 0;
  int n = log(Size)/log(3);
  int two = 0;
  int three = 0;
  int total = 0;
  
  while(p < n+1){
    q = 0;
    i = 0;
    while(i <= bigval){
      two = pow(2, p);
      three = pow(3, q);
      total = two * three; 
      p--;
      q++;
      i++;
    }
    bigval++;
    p = bigval;
  }

  
  *N_Comp = num_comp;
  *N_Move = num_move;
} 

int Print_Seq_1(char *Filename, int Size){
  FILE *seqfile = fopen(Filename, "w");
  fseek(seqfile, 0, SEEK_SET);
  
  if(seqfile == NULL){
    return EXIT_FAILURE;
  }

  int i = 1;
  int sizeseq = 0;
  for(i = 1; i <= Size; i = i*2+1){
    sizeseq++;
  }
  fprintf(seqfile, "%d\n", sizeseq);
  for(i = 1; i <= Size; i = i*2+1){
    fprintf(seqfile, "%d\n", i);
  }

  fclose(seqfile);
  return sizeseq;
}

int Print_Seq_2(char *Filename, int Size){
  FILE *seqfile = fopen(Filename, "w");
  fseek(seqfile, 0, SEEK_SET);
  int p = 0;
  int q = 0;
  int i = 0;
  int bigval = 0;
  int n = log(Size)/log(3);
  int ktotal = ((n+2)*(n+1))/2;
  fprintf(seqfile, "%d\n", ktotal);
  int two = 0;
  int three = 0;
  int total = 0;
  
  while(p < n+1){
    q = 0;
    i = 0;
    while(i <= bigval){
      two = pow(2, p);
      three = pow(3, q);
      total = two * three; 
      fprintf(seqfile, "%d\n", total);
      p--;
      q++;
      i++;
    }
    bigval++;
    p = bigval;
  }
  
  fclose(seqfile);
  return ktotal;
}





 // int seq[Size];
  // seq[0] = 1;
  //int j = 1;
  //while(i < Size){
  //  i = 2*seq[i-1]+1;
  //  seq[j] = i;
  //  fprintf(seqfile, "%d\n", seq[j]);
  //  j++;
  // }



  /*for(i = num; i < Size; i = (i-1)/2){
    for(k = 0; k < i; j++){
      for(j = k; j < Size; j = j + i){
	temp = Array[j];
	num_move++;
	for(h = k; h < j; h = h + i){
	  num_comp++;
	  if(Array[j] < Array[h]){
	    Array[j] = Array[h];
	    num_move++;
	    Array[h] = temp;
	    num_move++;
	  }
	}
      }
    } 
    } */

/*for(i = ktotal; i >= 0; ktotal--){
    kval = seq[ktotal];
    for(j = kval; j < Size; j++){   // <- not sure
      temp = Array[j];
      num_move++;
      k = j; 
      while(k >= kval && Array[k - kval] > temp){
	num_comp++;
	Array[k] = Array[k - kval];
	num_move++;
	k = k - kval;
      }
      Array[k] = temp;
      num_move++;
    }
  }

  *N_Comp = num_comp;
  *N_Move = num_move;
  }*/


//bubble sequence 1
/*for(i = num; i < Size; i = (i-1)/2){
    for(k = 0; k < i; j++){
      for(j = k; j < Size; j = j + i){
	for(h = k; h < Size; h = h + i){
	  num = h;
	}
	for(h = num; h > j; h = h - i){
	  num_comp++;
	  if(Array[h] < Array[h - i]){
	    temp = Array[h - i];
	    Array[h - i] = Array[h];
	    Array[h] = temp;
	    num_move++;
	  }
	  num_move++;
	}
      }
    }
    }*/  
